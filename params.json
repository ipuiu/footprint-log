{"name":"Footprint","tagline":"Rack Application Logging Tools","body":"<h1>Footprint</h1>\r\nRack Application Logging Tools\r\n\r\n<img src=\"https://badge.fury.io/rb/footprint-log.svg\" alt=\"Gem Version\" />\r\n<img src=\"https://travis-ci.org/ipuiu/footprint-log.svg?branch=master\" alt=\"Build Status\" />\r\n<img src=\"https://gemnasium.com/ipuiu/footprint-log.svg\" alt=\"Dependency Status\" />\r\n<img src=\"https://codeclimate.com/github/ipuiu/footprint-log/badges/gpa.svg\" />\r\n<img src=\"https://coveralls.io/repos/ipuiu/footprint-log/badge.png?branch=master\" alt=\"Coverage Status\" />\r\n<img src=\"http://inch-ci.org/github/ipuiu/footprint-log.svg?branch=master\" alt=\"Inline docs\" />\r\n\r\n<h2>What is \"Footprint\" ?</h2>\r\n\r\nFootprint was started by the need to have a simple and smart way to deal with the logs.\r\n\r\nIt is composed of:\r\n\r\n    require 'footprint/log' # some custom loggers.\r\n    require 'footprint/middleware' # middleware used to decorate Rack applications.\r\n\r\n<h2>How to use it ?</h2>\r\n\r\nFirst you should add the gem to your Gemfile:\r\n\r\n    gem 'footprint-log'\r\n\r\n\r\n<h3>Basic Usage </h3>\r\n\r\nLet's say that we don't care about what logger we use, and we just wish a logger method in our app that acts like a logger instance.\r\n\r\nIn that case we can do something like this:\r\n\r\n    require 'sinatra'\r\n    require 'footprint/middleware'\r\n\r\n    class MyApp < Sinatra\r\n\r\n        use Footprint::Middleware\r\n\r\n        get '/' do\r\n            logger.info 'I can use logger method inside my route!'\r\n        end\r\n\r\n    end\r\n\r\n<h3>Advanced Usage</h3>\r\n\r\nLet's say that we care about what logger we use, and we also wish a logger method in our app that acts like a logger instance.\r\n\r\nLet's assume we want to use a instance of the Logger class, initialized with log_device as STDOUT.\r\n\r\nIn that case we can do something like this:\r\n\r\n    require 'sinatra'\r\n    require 'footprint/middleware'\r\n\r\n    class MyApp < Sinatra\r\n\r\n        use Footprint::Middleware do\r\n            set Logger, STDOUT\r\n        end\r\n\r\n        get '/' do\r\n            logger.info 'I can use a instance of Logger class, initialized with STDOUT option by calling the logger method inside my route!'\r\n        end\r\n\r\n    end\r\n\r\n\r\nLet's assume we want to use the following custom Logger class, initialized with log_device as STDOUT and level as 1 (that is INFO level).\r\n\r\n    class MyAwesomeLogger < Logger\r\n\r\n        def initialize logdev, level\r\n            super logdev, shift_age = 0, shift_size = 1048576\r\n            @level = level\r\n        end\r\n\r\n    end\r\n\r\n\r\nIn that case we can do something like this:\r\n\r\n    require 'sinatra'\r\n    require 'footprint/middleware'\r\n\r\n    class MyApp < Sinatra\r\n\r\n        use Footprint::Middleware do\r\n            set MyAwesomeLogger, STDOUT, 1\r\n        end\r\n\r\n        get '/' do\r\n            logger.info 'I can use a instance of MyAwesomeLogger class, initialized with STDOUT, 1 option by calling the logger method inside my route!'\r\n        end\r\n\r\n    end\r\n\r\n\r\n<h2>Contributing to Footprint</h2>\r\n \r\n* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.\r\n* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.\r\n* Fork the project.\r\n* Start a feature/bugfix branch.\r\n* Commit and push until you are happy with your contribution.\r\n* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.\r\n* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.\r\n\r\n<h2>Copyright</h2>\r\n\r\nCopyright (c) 2014 Puiu Ionut. See LICENSE.txt for\r\nfurther details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}